{-# LANGUAGE TemplateHaskell #-}
-- | Implementation of the server that controls the long-running GHC instance.
-- | This is the place where the GHC-specific part joins the part
-- implementing the general RPC infrastructure.
--
-- The modules importing any GHC internals, as well as the modules
-- implementing the  RPC infrastructure, should be accessible to the rest
-- of the program only indirectly, through the @GhcServer@ module.
module GhcServer
  ( -- * Types involved in the communication
    PCounter, GhcRequest(..), GhcResponse(..)
  , Progress(..)  -- probably move somewhere outside
  , fmap2Progress
    -- * A handle to the server
  , GhcServer
    -- * Server-side operations
  , createGhcServer
    -- * Client-side operations
  , forkGhcServer
  , rpcGhcServer
  , shutdownGhcServer
  ) where

-- getExecutablePath is in base only for >= 4.6
import System.Environment.Executable (getExecutablePath)
import System.FilePath ((</>), takeExtension)
import System.Directory
import Data.Aeson.TH (deriveJSON)
import System.IO
  ( stdin
  , stdout
  , stderr
  )

import RpcServer
import Common
import GhcRun

type PCounter = ()
data GhcRequest  = ReqCompute FilePath
  deriving Show
data GhcResponse = RespWorking PCounter | RespDone [SourceError]
  deriving Show

$(deriveJSON id ''GhcRequest)
$(deriveJSON id ''GhcResponse)

newtype GhcState = GhcState { lOpts :: LeftoverOpts }

type GhcServer = RpcServer GhcRequest GhcResponse

-- * Server-side operations

-- TODO: So far we don't return partial information, except the first,
-- for testing. Do we want to return partial error information while it's
-- generated by runGHC? We could either try to run checkModule
-- file by file (I'm not sure this is possible) or run checkModule
-- in a thread and rewrite collectSrcError to place errors in a channel
-- and not in an IORef, read from the channel after set intervals and return
-- errors one by one in Progress, as soon as they appear. The problem
-- is that there are usually very few errors and found quickly one after
-- another, so perhaps instead return the number of files already type-checked
-- in Progress and only eventually return the errors? Sending warnings
-- one by one, or file after file, makes sense, OTOH.
ghcServerEngine :: GhcState -> GhcRequest
                -> IO (Progress GhcResponse GhcResponse)
ghcServerEngine GhcState{lOpts} (ReqCompute configSourcesDir) = do
  cnts <- getDirectoryContents configSourcesDir
  let files = map (configSourcesDir </>)
              $ filter ((`elem` [".hs"]) . takeExtension) cnts
  errs <- checkModule files Nothing lOpts
  let finalP = Progress $ return $ Left $ RespDone errs
  return $ Progress $ return $ Right (RespWorking (), finalP)

createGhcServer :: [String] -> IO ()
createGhcServer opts = do
  lOpts <- submitOpts opts
  rpcServer stdin stdout stderr (ghcServerEngine GhcState{..})

-- * Client-side operations

forkGhcServer :: IO GhcServer
forkGhcServer = do
  prog <- getExecutablePath
  forkRpcServer prog ["--server"]

rpcGhcServer :: GhcServer -> FilePath
             -> (Progress GhcResponse GhcResponse -> IO a) -> IO a
rpcGhcServer gs configSourcesDir handler =
  rpcWithProgress gs (ReqCompute configSourcesDir) handler

shutdownGhcServer :: GhcServer -> IO ()
shutdownGhcServer gs = shutdown gs
