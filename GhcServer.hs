{-# LANGUAGE ScopedTypeVariables, TemplateHaskell #-}
-- | Implementation of the server that controls the long-running GHC instance.
-- This is the place where the GHC-specific part joins the part
-- implementing the general RPC infrastructure.
--
-- The modules importing any GHC internals, as well as the modules
-- implementing the  RPC infrastructure, should be accessible to the rest
-- of the program only indirectly, through the @GhcServer@ module.
module GhcServer
  ( -- * Types involved in the communication
    PCounter, GhcRequest(..), GhcResponse(..)
    -- * A handle to the server
  , GhcServer
    -- * Server-side operations
  , ghcServer
    -- * Client-side operations
  , forkGhcServer
  , rpcGhcServer
  , shutdownGhcServer
  ) where

-- getExecutablePath is in base only for >= 4.6
import qualified Control.Exception as Ex
import System.Environment.Executable (getExecutablePath)
import Data.Aeson.TH (deriveJSON)
import Data.IORef
import Control.Applicative

import RpcServer
import Common
import GhcRun
import Progress

data GhcRequest
  = ReqCompile (Maybe [String]) FilePath Bool
  | ReqRun     (Maybe [String]) FilePath (String, String)
  deriving Show
data GhcResponse = RespWorking PCounter | RespDone RunOutcome
  deriving Show

$(deriveJSON id ''GhcRequest)
$(deriveJSON id ''GhcResponse)

-- Keeps the dynamic portion of the options specified at server startup
-- (they are among the options listed in SessionConfig).
-- They are only fed to GHC if no options are set via a session update command.
data GhcInitData = GhcInitData { dOpts :: DynamicOpts
                               , errsRef :: IORef [SourceError]
                               }

type GhcServer = RpcServer GhcRequest GhcResponse

-- * Server-side operations

ghcServer :: [String] -> IO ()
ghcServer fdsAndOpts = do
  let (opts, markerAndFds) = span (/= "--ghc-opts-end") fdsAndOpts
  rpcServer (tail markerAndFds) (ghcServerEngine opts)

-- TODO: this function is getting too complex: boolean, Maybe, complex
-- results, etc.; perhaps change GhcRequest and GhcResponse to reflect
-- the options in a better way and split the code paths?
-- TODO: Do we want to return partial error information while it's
-- generated by runGHC, e.g., warnings? We could either try to run checkModule
-- file by file (do depanalSource and then DFS over the resulting graph,
-- doing \ m -> load (LoadUpTo m)) or rewrite collectSrcError to place
-- warnings in an mvar instead of IORef and read from it into Progress,
-- as soon as they appear.
ghcServerEngine :: [String]
                -> RpcServerActions GhcRequest GhcResponse GhcResponse
                -> IO ()
ghcServerEngine opts RpcServerActions{..} = do
  -- Submit static opts and get back leftover dynamic opts.
  dOpts <- submitStaticOpts opts
  -- Init error collection and exception handlers.
  errsRef <- newIORef []

  dispatcher GhcInitData{..}

 where
  dispatcher :: GhcInitData -> IO ()
  dispatcher ghcInitData@GhcInitData{errsRef} = do
    let handleOtherErrors =
          Ex.handle $ \e -> do
            case debugFile of
              Nothing -> return ()
              Just logName -> appendFile logName
                $ "handleOtherErrors: " ++ showExWithClass e ++ "\n"
            let exError = OtherError (show (e :: Ex.SomeException))
            -- In case of an exception, don't lose saved errors.
            errs <- reverse <$> readIORef errsRef
            return $ RespDone (errs ++ [exError], Nothing)
    req <- getRequest
    resp <- handleOtherErrors $
      runFromGhc $ ghcServerHandler ghcInitData putProgress req
    putResponse resp
    dispatcher ghcInitData

ghcServerHandler :: GhcInitData -> (GhcResponse -> IO ()) -> GhcRequest
                 -> Ghc GhcResponse
ghcServerHandler GhcInitData{dOpts, errsRef}
                 reportProgress
                 (ReqCompile ideNewOpts configSourcesDir ideGenerateCode) = do
  -- Init the inteface to the RPC architecture.
  let dynOpts = maybe dOpts optsToDynFlags ideNewOpts
      -- Let GHC API print "compiling M ... done." for each module.
      verbosity = 1
      -- TODO: verify that _ is the "compiling M" message
      handlerOutput ioRef _ = do
        oldCounter <- readIORef ioRef
        modifyIORef ioRef (+1)
        reportProgress (RespWorking oldCounter)
      handlerRemaining _ = return ()  -- TODO: put into logs somewhere?
  -- Catch all errors.
  runOutcome <- controlGhc configSourcesDir dynOpts
                           ideGenerateCode Nothing verbosity
                           errsRef handlerOutput handlerRemaining
  return (RespDone runOutcome)
ghcServerHandler GhcInitData{dOpts, errsRef}
                 reportProgress
                 (ReqRun ideNewOpts configSourcesDir funToRun) = do
  -- Init the inteface to the RPC architecture.
  let dynOpts = maybe dOpts optsToDynFlags ideNewOpts
      -- Let GHC API print "compiling M ... done." for each module.
      verbosity = 1
      -- TODO: verify that _ is the "compiling M" message
      handlerOutput ioRef _ = do
        oldCounter <- readIORef ioRef
        modifyIORef ioRef (+1)
        reportProgress (RespWorking oldCounter)
      handlerRemaining _ = return ()  -- TODO: put into logs somewhere?
  -- Catch all errors.
  runOutcome <- controlGhc configSourcesDir dynOpts
                           True (Just funToRun) verbosity
                           errsRef handlerOutput handlerRemaining
  return (RespDone runOutcome)

-- * Client-side operations

forkGhcServer :: [String] -> IO GhcServer
forkGhcServer opts = do
  prog <- getExecutablePath
  forkRpcServer prog $ ["--server"] ++ opts ++ ["--ghc-opts-end"]

rpcGhcServer :: GhcServer -> GhcRequest
             -> (Progress GhcResponse GhcResponse -> IO a) -> IO a
rpcGhcServer = rpcWithProgress

shutdownGhcServer :: GhcServer -> IO ()
shutdownGhcServer gs = shutdown gs
