From 8fea5ed759e21e4057268c46d4df724d880b8f62 Mon Sep 17 00:00:00 2001
From: Edsko de Vries <edsko@well-typed.com>
Date: Thu, 16 May 2013 14:50:37 +0100
Subject: [PATCH 8/9] Add hook to HscPlugin for QQs

---
 compiler/main/HscPlugin.hs      | 17 ++++++++++++++---
 compiler/typecheck/TcSplice.lhs | 15 +++++++++++++++
 2 files changed, 29 insertions(+), 3 deletions(-)

diff --git a/compiler/main/HscPlugin.hs b/compiler/main/HscPlugin.hs
index feca61c..d0a3743 100644
--- a/compiler/main/HscPlugin.hs
+++ b/compiler/main/HscPlugin.hs
@@ -5,13 +5,24 @@ module HscPlugin
 import TcRnTypes
 import DynFlags
 import MonadUtils
+import HsTypes
+import Name
 
 import Data.Monoid
 import Control.Monad
 
-data HscPlugin = HscPlugin { runHscPlugin :: forall m. MonadIO m => DynFlags -> TcGblEnv -> m TcGblEnv }
+data HscPlugin = HscPlugin {
+    runHscPlugin :: forall m. MonadIO m => DynFlags -> TcGblEnv -> m TcGblEnv
+  , runHscQQ     :: forall m. MonadIO m => DynFlags -> HsQuasiQuote Name -> m (HsQuasiQuote Name)
+  }
 
 instance Monoid HscPlugin where
-  mempty = HscPlugin $ const return
-  (HscPlugin f) `mappend` (HscPlugin g) = HscPlugin (\dynFlags -> f dynFlags >=> g dynFlags)
+  mempty = HscPlugin {
+      runHscPlugin = const return
+    , runHscQQ     = const return
+    }
 
+  a `mappend` b = HscPlugin {
+      runHscPlugin = \dynFlags -> runHscPlugin a dynFlags >=> runHscPlugin b dynFlags
+    , runHscQQ     = \dynFlags -> runHscQQ     a dynFlags >=> runHscQQ     b dynFlags
+    }
diff --git a/compiler/typecheck/TcSplice.lhs b/compiler/typecheck/TcSplice.lhs
index 50d363c..87c4bdd 100644
--- a/compiler/typecheck/TcSplice.lhs
+++ b/compiler/typecheck/TcSplice.lhs
@@ -75,6 +75,9 @@ import BasicTypes
 import Panic
 import FastString
 import Control.Monad    ( when )
+import HscPlugin
+import Data.Monoid (mconcat)
+import DynFlags (DynFlags(sourcePlugins))
 
 import qualified Language.Haskell.TH as TH
 -- THSyntax gives access to internal functions and data types
@@ -667,6 +670,11 @@ the splice is run by the *renamer* rather than the type checker.
 See Note [Quasi-quote overview] in TcSplice.
 
 \begin{code}
+getDynFlags :: RnM DynFlags
+getDynFlags = do
+  env <- getEnv
+  return (hsc_dflags (env_top env)) 
+
 runQuasiQuote :: Outputable hs_syn
               => HsQuasiQuote RdrName   -- Contains term of type QuasiQuoter, and the String
               -> Name                   -- Of type QuasiQuoter -> String -> Q th_syn
@@ -703,6 +711,13 @@ runQuasiQuote (HsQuasiQuote quoter q_span quote) quote_selector meta_ty meta_ops
 
         ; traceTc "runQQ" (ppr quoter <+> ppr is_local)
 
+          -- Notify any source plugins about the QQ
+        ; dynFlags <- getDynFlags
+        ; HsQuasiQuote quoter' q_span quote <- 
+            runHscQQ (mconcat (sourcePlugins dynFlags)) 
+                     dynFlags
+                     (HsQuasiQuote quoter' q_span quote)
+
           -- Build the expression
         ; let quoterExpr = L q_span $! HsVar $! quoter'
         ; let quoteExpr = L q_span $! HsLit $! HsString quote
-- 
1.7.12.4 (Apple Git-37)

