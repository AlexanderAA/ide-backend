diff -ur orig/tagged-0.4.4/Data/Proxy.hs tagged-0.4.4/Data/Proxy.hs
--- orig/tagged-0.4.4/Data/Proxy.hs	2013-03-06 13:01:45.000000000 +0000
+++ tagged-0.4.4/Data/Proxy.hs	2013-03-06 13:32:00.000000000 +0000
@@ -3,7 +3,7 @@
 {-# LANGUAGE DeriveDataTypeable #-}
 #endif
 #if defined(__GLASGOW_HASKELL__) && __GLASGOW_HASKELL__ >= 706
-{-# LANGUAGE PolyKinds #-}
+{-# LANGUAGE KindSignatures #-}
 #endif
 ----------------------------------------------------------------------------
 -- |
@@ -35,10 +35,11 @@
 import Data.Monoid
 #ifdef __GLASGOW_HASKELL__
 import GHC.Arr (unsafeIndex, unsafeRangeSize)
-import Data.Data
+import Data.Data hiding (Proxy)
 #endif
 
 data Proxy s = Proxy
+  deriving (Typeable, Data)
 
 instance Eq (Proxy s) where
   _ == _ = True
@@ -52,37 +53,6 @@
 instance Read (Proxy s) where
   readsPrec d = readParen (d > 10) (\r -> [(Proxy, s) | ("Proxy",s) <- lex r ])
 
-#ifdef __GLASGOW_HASKELL__
-
-instance Typeable1 Proxy where
-  typeOf1 _ = mkTyConApp proxyTyCon []
-
-proxyTyCon :: TyCon
-#if __GLASGOW_HASKELL__ < 704
-proxyTyCon = mkTyCon "Data.Proxy.Proxy"
-#else
-proxyTyCon = mkTyCon3 "tagged" "Data.Proxy" "Proxy"
-#endif
-{-# NOINLINE proxyTyCon #-}
-
-instance Data s => Data (Proxy s) where
-  gfoldl _ z _ = z Proxy
-  toConstr _ = proxyConstr
-  gunfold _ z c = case constrIndex c of
-    1 -> z Proxy
-    _ -> error "gunfold"
-  dataTypeOf _ = proxyDataType
-  dataCast1 f = gcast1 f
-
-proxyConstr :: Constr
-proxyConstr = mkConstr proxyDataType "Proxy" [] Prefix
-{-# NOINLINE proxyConstr #-}
-
-proxyDataType :: DataType
-proxyDataType = mkDataType "Data.Proxy.Proxy" [proxyConstr]
-{-# NOINLINE proxyDataType #-}
-#endif
-
 instance Enum (Proxy s) where
     succ _ = error "Proxy.succ"
     pred _ = error "Proxy.pred"
diff -ur orig/tagged-0.4.4/Data/Tagged.hs tagged-0.4.4/Data/Tagged.hs
--- orig/tagged-0.4.4/Data/Tagged.hs	2013-03-06 13:01:45.000000000 +0000
+++ tagged-0.4.4/Data/Tagged.hs	2013-03-06 13:30:55.000000000 +0000
@@ -3,7 +3,7 @@
 {-# LANGUAGE DeriveDataTypeable #-}
 #endif
 #if defined(__GLASGOW_HASKELL__) && __GLASGOW_HASKELL__ >= 706
-{-# LANGUAGE PolyKinds #-}
+{-# LANGUAGE KindSignatures #-}
 #endif
 ----------------------------------------------------------------------------
 -- |
@@ -46,39 +46,9 @@
 -- Moreover, you don't have to rely on the compiler to inline away the extra
 -- argument, because the newtype is \"free\"
 newtype Tagged s b = Tagged { unTagged :: b } deriving
-  ( Eq, Ord, Ix, Bounded
+  ( Eq, Ord, Ix, Bounded, Typeable, Data
   )
 
-#ifdef __GLASGOW_HASKELL__
-instance Typeable2 Tagged where
-  typeOf2 _ = mkTyConApp taggedTyCon []
-
-taggedTyCon :: TyCon
-#if __GLASGOW_HASKELL__ < 704
-taggedTyCon = mkTyCon "Data.Tagged.Tagged"
-#else
-taggedTyCon = mkTyCon3 "tagged" "Data.Tagged" "Tagged"
-#endif
-
-instance (Data s, Data b) => Data (Tagged s b) where
-  gfoldl f z (Tagged b) = z Tagged `f` b
-  toConstr _ = taggedConstr
-  gunfold k z c = case constrIndex c of
-    1 -> k (z Tagged)
-    _ -> error "gunfold"
-  dataTypeOf _ = taggedDataType
-  dataCast1 f = gcast1 f
-  dataCast2 f = gcast2 f
-
-taggedConstr :: Constr
-taggedConstr = mkConstr taggedDataType "Tagged" [] Prefix
-{-# INLINE taggedConstr #-}
-
-taggedDataType :: DataType
-taggedDataType = mkDataType "Data.Tagged.Tagged" [taggedConstr]
-{-# INLINE taggedDataType #-}
-#endif
-
 instance Show b => Show (Tagged s b) where
     showsPrec n (Tagged b) = showParen (n > 10) $
         showString "Tagged " .
