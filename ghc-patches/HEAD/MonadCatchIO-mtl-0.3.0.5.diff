diff -Nur orig/MonadCatchIO-mtl-0.3.0.5/Control/Monad/CatchIO.hs MonadCatchIO-mtl-0.3.0.5/Control/Monad/CatchIO.hs
--- orig/MonadCatchIO-mtl-0.3.0.5/Control/Monad/CatchIO.hs	2013-07-25 14:37:02.000000000 +0100
+++ MonadCatchIO-mtl-0.3.0.5/Control/Monad/CatchIO.hs	2013-07-25 14:36:34.000000000 +0100
@@ -1,3 +1,4 @@
+{-# LANGUAGE MagicHash #-}
 module Control.Monad.CatchIO ( MonadCatchIO(..),
                                E.Exception(..),
                                throw,
@@ -18,6 +19,9 @@
 import Control.Monad.Writer
 import Control.Monad.RWS
 
+import GHC.IO (IO(IO))
+import GHC.Base (maskAsyncExceptions#, unmaskAsyncExceptions#)
+
 class MonadIO m => MonadCatchIO m where
     -- | Generalized version of 'E.catch'
     catch   :: E.Exception e => m a -> (e -> m a) -> m a
@@ -52,8 +56,8 @@
 
 instance MonadCatchIO IO where
     catch   = E.catch
-    block   = E.block
-    unblock = E.unblock
+    block   = \(IO io) -> IO $ maskAsyncExceptions# io 
+    unblock = \(IO io) -> IO $ unmaskAsyncExceptions# io
 
 instance MonadCatchIO m => MonadCatchIO (ReaderT r m) where
     m `catch` f = ReaderT $ \r -> (runReaderT m r)
